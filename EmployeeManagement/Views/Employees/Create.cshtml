@model EmployeeManagement.Models.Employee

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
@using (Html.BeginForm("Create", "Employees", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(false);
    <table>
        <tr>
            <td>@Html.LabelFor(model => model.IdCard)</td>
            <td>@Html.TextBoxFor(model => model.IdCard)</td>
            <td>@Html.ValidationMessageFor(model => model.IdCard, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.FirstName)</td>
            <td>@Html.TextBoxFor(model => model.FirstName)</td>
            <td>@Html.ValidationMessageFor(model => model.FirstName, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.LastName)</td>
            <td>@Html.TextBoxFor(model => model.LastName)</td>
            <td>@Html.ValidationMessageFor(model => model.LastName, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.Gender)</td>
            <td>
                @{
                    bool isChecked = true;
                    foreach (var item in (int[])Enum.GetValues(typeof(Gender)))
                    {
                        @Html.RadioButtonFor(model => model.Gender, item, isChecked ? new { @checked = "checked" } : null) @((Gender)item)
                        isChecked = false;
                    }
                }
            </td>
            <td>@Html.ValidationMessageFor(model => model.Gender, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.DateOfBirth)</td>
            <td>@Html.TextBoxFor(model => model.DateOfBirth, new { @readonly = "readonly" })</td>
            <td>@Html.ValidationMessageFor(model => model.DateOfBirth, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.IsMarried)</td>
            <td>@Html.CheckBoxFor(model => model.IsMarried)</td>
            <td>@Html.ValidationMessageFor(model => model.IsMarried, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.Email)</td>
            <td>@Html.TextBoxFor(model => model.Email)</td>
            <td>@Html.ValidationMessageFor(model => model.Email, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.PhoneNumber)</td>
            <td>@Html.TextBoxFor(model => model.PhoneNumber)</td>
            <td>@Html.ValidationMessageFor(model => model.PhoneNumber, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.Address)</td>
            <td>@Html.TextAreaFor(model => model.Address)</td>
            <td>@Html.ValidationMessageFor(model => model.Address, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.Salary)</td>
            <td>@Html.TextBoxFor(model => model.Salary)</td>
            <td>@Html.ValidationMessageFor(model => model.Salary, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.EditSkills)</td>
            <td>@Html.ListBoxFor(model => model.EditSkills, (List<SelectListItem>)ViewBag.Skills)</td>
            <td>@Html.ValidationMessageFor(model => model.EditSkills, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.DepartmentId)</td>
            <td>@Html.DropDownListFor(model => model.DepartmentId, (List<SelectListItem>)ViewBag.Departments, "Select Department")</td>
            @*<td>@Html.DropDownListFor(model => model.DepartmentId, (List<SelectListItem>)ViewBag.Departments, "Select Department", new { multiple = "multiple" })</td>*@
            <td>@Html.ValidationMessageFor(model => model.DepartmentId, "")</td>
        </tr>
        <tr>
            <td></td>
            <td colspan="2">
                <a href="javascript:void(0)" id="btnOpenDepartmentDialog">Create Department</a>
            </td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.ExpiryDate)</td>
            <td>@Html.TextBoxFor(model => model.ExpiryDate, new { @readonly = "readonly" })</td>
            <td>@Html.ValidationMessageFor(model => model.ExpiryDate, "")</td>
        </tr>
        <tr>
            <td>@Html.LabelFor(model => model.ConfirmExpiryDate)</td>
            <td>@Html.TextBoxFor(model => model.ConfirmExpiryDate, new { @readonly = "readonly" })</td>
            <td>@Html.ValidationMessageFor(model => model.ConfirmExpiryDate, "")</td>
        </tr>
        <tr>
            <td colspan="3">
                <input type="submit" value="submit" />
            </td>
        </tr>
    </table>
                    }


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<div id="createDepartmentDialog" title="Create New Department">
    <form>
        <table>
            @{Html.RenderPartial("~/Views/Departments/_Partial_CreateDepartment.cshtml");}
            <tr>
                <td></td>
                <td>
                    <input type="submit" value="Submit" />
                    <input type="button" value="Close" />
                </td>
            </tr>
        </table>
    </form>
</div>

@section JsScript{
    <script type="text/javascript">
        $("#DateOfBirth").datepicker({ dateFormat: "mm/dd/yy", changeYear: true, yearRange: "-100:+0" });
        $("#ExpiryDate").datepicker({ dateFormat: "mm/dd/yy", changeYear: true, yearRange: "-100:+0"});
        $("#ConfirmExpiryDate").datepicker({ dateFormat: "mm/dd/yy", changeYear: true, yearRange: "-100:+0" });

    </script>

    <script type="text/javascript">
        var $dialog = $('#createDepartmentDialog').dialog({
            autoOpen: false,
            minHeight: 200,
            minWidth: 400
        });
        var $departmentForm = $dialog.find('form');
        var $departmentIdDdl = $('#DepartmentId');


        $('#btnOpenDepartmentDialog').on('click', function () {
            $dialog.dialog("open");
        })

        $departmentForm.on('submit', function (event) {
            event.preventDefault();
            return false;
        })

        $departmentForm.find('[value="Submit"]').on('click', function () {
            // khi button k phai submit
            var sendData = $departmentForm.serialize();
            if ($departmentForm.valid()) {
                console.log('OK');
                $.ajax({
                    url: '/Departments/CreateByAjax',
                    method: 'post',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    dataType: 'json',
                    data: sendData,
                    success: function (data) {
                        if (data.Status) {
                            console.log(data.Result);
                            var s = '<option value="' + data.Result.DepartmentId + '">' + data.Result.Name + '</option>';
                            //$departmentIdDdl.prepend(s);
                            $departmentIdDdl.find('option').first().after(s);
                            resetDepartmentForm();
                        }
                    }
                })
            } else {
                console.log('Fix Error');
            }
        })

        $departmentForm.find('[value="Close"]').on('click', function () {
            resetDepartmentForm();
        })

        function resetDepartmentForm() {
            $departmentForm[0].reset(); //javascript
            //$departmentForm.trigger('reset');
            //$departmentForm.find('#Name-error').remove();
            $departmentForm.find('.field-validation-error')
                .removeClass('field-validation-error')
                .addClass('field-validation-valid');
            $departmentForm.find('.field-validation-valid').empty();
            $dialog.dialog('close');
        }
    </script>
}
