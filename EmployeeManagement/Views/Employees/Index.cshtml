@using PagedList
@using PagedList.Mvc

@model IPagedList<EmployeeManagement.ViewModels.EmployeeListVM>



<p>
    @Html.ActionLink("Create New", "Create")
</p>

@Html.PagedListPager(Model, page => Url.Action("Index", "Employees", new { pageNumber = page, searchValue = Request.QueryString["searchValue"] }),
    new PagedListRenderOptions()
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayPageCountAndCurrentLocation = true,
        LinkToFirstPageFormat = "First",
        LinkToNextPageFormat = "Next",
        LinkToPreviousPageFormat = "Previous",
        LinkToLastPageFormat = "Last",
        UlElementClasses = new List<string>() { "paging" }
    })

@*<form action="/Employees/Index" method="get">
        <input type="text" name="searchValue" value="@Request.QueryString["searchValue"]"/>
        <input type="submit" value="search"/>
    </form>*@

<p>Current Employees: @ViewBag.CurrentEmployees</p>
<p>Current Employees: @ViewData["CurrentEmployees"]</p>
@using (Html.BeginForm("Index", "Employees", FormMethod.Get))
{
    @Html.TextBox("searchValue", string.Empty, new { id = "txtSearchValue" })
    @Html.Hidden("sortField")
    <input type="submit" value="Search" />
    <input type="button" value="Delete" id="btnDeleteMany" />
}
<br />

<table class="table" border="1" id="table1">
    <thead>
        <tr>
            <th>
                <input type="checkbox" id="chkAll" />
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.First().DisplayFullName).ToString(),
           "Index", "Employees", new
           {
               sortField = ViewBag.SortByName
           ,
               searchValue = Request.QueryString["searchValue"]
           }, null)
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.First().Gender).ToString(),
           "Index", "Employees", new { sortField = ViewBag.SortByGender, searchValue = Request.QueryString["searchValue"] }, null)
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.First().DateOfBirth).ToString(),
           "Index", "Employees", new { sortField = ViewBag.SortByBirthdate, searchValue = Request.QueryString["searchValue"] }, null)

            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.First().DisplayMarriedStatus).ToString(),
           "Index", "Employees", new { sortField = ViewBag.SortByMarriedStatus, searchValue = Request.QueryString["searchValue"] }, null)

            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.First().Email).ToString(),
           "Index", "Employees", new { sortField = ViewBag.SortByEmail, searchValue = Request.QueryString["searchValue"] }, null)

            </th>
            <th>
                @Html.ActionLink(@Html.DisplayNameFor(model => model.First().Salary).ToString(),
           "Index", "Employees", new { sortField = ViewBag.SortBySalary, searchValue = Request.QueryString["searchValue"] }, null)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().DisplaySkills)
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.First().DepartmentName).ToString(),
           "Index", "Employees", new { sortField = ViewBag.SortByDepartment, searchValue = Request.QueryString["searchValue"] }, null)
            </th>
            <th></th>
            <th></th>

        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    <input type="checkbox" value="@item.EmployeeId" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DisplayFullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateOfBirth)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DisplayMarriedStatus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Salary)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DisplaySkills)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DepartmentName)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.EmployeeId }) |
                    @Html.ActionLink("Details", "Details", new { id = item.EmployeeId }) |
                    @Html.ActionLink("Delete (Get)", "Delete", "Employees",
new
{
    id = item.EmployeeId,
    searchValue = Request.QueryString["searchValue"],
    sortField = Request.QueryString["sortField"],
    pageNumber = Request.QueryString["pageNumber"]
}, null)
                </td>
                <td>
                    @*@using (Html.BeginForm("Delete", "Employees", FormMethod.Post))
                        {
                                @Html.AntiForgeryToken()
                                @Html.Hidden("searchValue", Request.QueryString["searchValue"])
                                @Html.Hidden("sortField", Request.QueryString["sortField"])
                                @Html.Hidden("pageNumber", Request.QueryString["pageNumber"])
                                @Html.Hidden("id", item.EmployeeId)
                                <input type="submit" value="Delete" />
                            }*@

                    @Html.ActionLink("Delete (Post - Ajax)", null, null, new {
                        href = "#", data_id = item.EmployeeId, @class = "deleteButton"
                    })
                </td>
            </tr>
        }
    </tbody>



</table>
@*<a href="/Employees/Index?pageNumber=1">1</a>
    <a href="@Url.Action("Index", "Employees", new {  pageNumber  = 2 })">2</a>
    @Html.ActionLink("3", "Index", "Employees", new { pageNumber = 3 }, new { @class = "abc", data_test = "test" })*@

@Html.AntiForgeryToken()
@section StyleScript{
    <style>
        .paging li {
            list-style-type: none;
            display: inline-block;
            margin-left: 5px;
            margin-right: 5px;
        }
    </style>
}
@section JsScript{
    <script type="text/javascript">
        var $multiCheckboxesModule = MyLib.Ui.MultiCheckBoxes({
            checkboxAllSelector: '#chkAll',
            checkboxListSelector: '#table1 tbody'
        })
        $multiCheckboxesModule.init();
    </script>
    <script type="text/javascript">
        var $table1 = $('#table1');
        var $btnDeleteMany = $('#btnDeleteMany');
        var currentPageCount = @ViewBag.PageCount;
        $btnDeleteMany.on('click', function () {
            var isDeleted = confirm('Do you want to delete these records?');
            if (isDeleted) {
                var sendData = {
                    deletedList: $multiCheckboxesModule.getSelectedItemValues(),
                    __RequestVerificationToken:$('input[name="__RequestVerificationToken"]').val()
                }
                $.ajax({
                    url: '/Employees/DeleteMany',
                    method: 'post',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    dataType: 'json',
                    data: sendData,
                    //contentType: 'application/json; charset=UTF-8',
                    //data: JSON.stringify(sendData),
                    beforeSend: function (jqXHR, settings) {
                        console.log('Start to send.');
                    },
                    success: function (data, textStatus, jqXHR) {
                        console.log('success');
                        if (data) {
                            var queryString = getQueryString(),
                                searchValue = queryString['searchValue'] || '',
                                sortField = queryString['sortField'] || '',
                                pageNumber = queryString['pageNumber'] || 1;

                            if ($table1.find('tbody tr').length == $multiCheckboxesModule.getSelectedItemValues().length) {
                                if (!isNaN(pageNumber) && pageNumber > 1) {
                                    if (pageNumber == currentPageCount) {
                                        pageNumber--;
                                    }
                                }
                            }

                            window.location.href = '/Employees/Index'
                                + '?searchValue=' + searchValue
                                + '&sortField=' + sortField
                                + '&pageNumber=' + pageNumber;
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log('error');
                    },
                    complete: function (jqXHR, textStatus) {
                        console.log('Complete')
                    },
                    statusCode: {
                        400: function () {

                        }
                    }
                })
            }
        })

    </script>
    <script type="text/javascript">
        $table1.find('tbody').on('click', '.deleteButton', function () {
            var $thisDeleteButton = $(this);

            var isDeleted = confirm('Do you want to delete these records?');
            if (isDeleted) {
                var sendData = {
                    deletedList: $thisDeleteButton.attr('data-id'),
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                }
                $.ajax({
                    url: '/Employees/DeleteMany',
                    method: 'post',
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    dataType: 'json',
                    data: sendData,
                    //contentType: 'application/json; charset=UTF-8',
                    //data: JSON.stringify(sendData),
                    beforeSend: function (jqXHR, settings) {
                        console.log('Start to send.');
                    },
                    success: function (data, textStatus, jqXHR) {
                        console.log('success');
                        if (data) {
                            var queryString = getQueryString(),
                                searchValue = queryString['searchValue'] || '',
                                sortField = queryString['sortField'] || '',
                                pageNumber = queryString['pageNumber'] || 1;

                            if ($table1.find('tbody tr').length == 1) {
                                if (!isNaN(pageNumber) && pageNumber > 1) {
                                    if (pageNumber == currentPageCount) {
                                        pageNumber--;
                                    }
                                }
                            }

                            window.location.href = '/Employees/Index'
                                + '?searchValue=' + searchValue
                                + '&sortField=' + sortField
                                + '&pageNumber=' + pageNumber;
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log('error');
                    },
                    complete: function (jqXHR, textStatus) {
                        console.log('Complete')
                    },
                    statusCode: {
                        400: function () {

                        }
                    }
                })
            }
            
            preventDefaultAction(event);
        })
    </script>
}